AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates Lambda and event rule to invoke ec2 terminations"
Transform: "AWS::Serverless-2016-10-31"
Resources:
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: datadog-event-ec2
      Description: Rule for datadog events to terminate ec2
      EventBusName: !Sub "my-event-bus-${AWS::Region}"
      EventPattern:
        account:
          - !Sub "${AWS::AccountId}"
        detail-type: 
          - Datadog Alert Notification
        detail:
          tags:
            - !Sub "region:${AWS::Region}"
      Targets:
          -
            Arn:
              Fn::GetAtt:
                - LambdaFunction
                - Arn
            Id: !Ref LambdaFunction
            InputPath: "$.detail.tags"
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ec2-terminate
      Description: Terminate EC2 instances
      Role: !GetAtt LambdaExecutionRole.Arn
      InlineCode: |
        import boto3
        import json
        ec2 = boto3.client('ec2')
        ec2Resource = boto3.resource('ec2')
        def lambda_handler(event, context):
          newEvent = event["tags"]
          str = ""
          subs = 'hostname'
          filteredTags = [i for i in newEvent if subs in i]
          str1 = str.join(filteredTags)
          name = str1.split(':',1)
          print(name[1])
          filters = [{  
          'Name': 'tag:Name',
          'Values': [name[1]]
          }]
    
          response = ec2.describe_instances(Filters=filters)["Reservations"]
          instanceId = response[0]['Instances'][0]['InstanceId'].split()
          ec2.stop_instances(InstanceIds=instanceId)
          #ec2Resource.instances.filter(InstanceIds=instanceId).terminate()
          print('stopped your instances: ' + name[1])
      Runtime: python3.8
      Timeout: 3
      Handler: index.lambda_handler
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "terminate-instance-lambda-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Terminate-Instance-Lambda-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ec2-terminate:*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                Resource: '*'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
Outputs:
    LambdaFunctionName:
        Description: "Name of Lambda Function created by CloudFormation Hopefully this works with pipeline!"
        Value: !Ref LambdaFunction


